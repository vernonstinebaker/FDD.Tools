<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>net.sourceforge</groupId>
    <artifactId>FDDTools</artifactId>
    <version>3.0.0-beta</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>21</maven.compiler.release>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <javafx.version>22.0.1</javafx.version>
    <javafx.platform>mac-aarch64</javafx.platform>
        <fddtools.app.name>FDD Tools</fddtools.app.name>
        <fddtools.bundle.id>net.sourceforge.fddtools</fddtools.bundle.id>
    <fddtools.app.version>${project.version}</fddtools.app.version>
        <skipDmg>false</skipDmg>
        <skipIconGen>false</skipIconGen>
        <skipSign>false</skipSign>
    </properties>

    <dependencies>
        <!-- JavaFX modules (use platform-specific classifier so classes are present at compile time) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
            <classifier>${javafx.platform}</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
            <classifier>${javafx.platform}</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
            <classifier>${javafx.platform}</classifier>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
            <classifier>${javafx.platform}</classifier>
        </dependency>

        <!-- App libs -->
        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>5.7.1</version>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>4.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>4.0.0</version>
        </dependency>

        <!-- UI icons -->
        <dependency>
            <groupId>de.jensd</groupId>
            <artifactId>fontawesomefx-fontawesome</artifactId>
            <version>4.7.0-9.1.2</version>
        </dependency>
        <dependency>
            <groupId>de.jensd</groupId>
            <artifactId>fontawesomefx-commons</artifactId>
            <version>9.1.2</version>
        </dependency>

        <!-- Logging setup -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.13</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>2.0.13</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.5.6</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>21</release>
                    <source>21</source>
                    <target>21</target>
                    <encoding>UTF-8</encoding>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                    <compilerArgs>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.12</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <useModulePath>false</useModulePath>
                    <!-- Suppress JavaFX native-access warnings on JDK 21+ when running tests -->
                    <argLine>@{argLine} --enable-native-access=ALL-UNNAMED</argLine>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>net.sourceforge.fddtools.FDDApplicationFX</mainClass>
                    <commandlineArgs>
                        <commandlineArg>--add-opens=java.base/java.lang=ALL-UNNAMED</commandlineArg>
                    </commandlineArgs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>net.sourceforge.fddtools.FDDApplicationFX</mainClass>
                                    <manifestEntries>
                                        <Implementation-Title>FDD Tools</Implementation-Title>
                                        <Implementation-Version>${project.version}</Implementation-Version>
                                        <Application-Name>FDD Tools</Application-Name>
                                        <Bundle-Name>FDD Tools</Bundle-Name>
                                        <Application-Title>FDD Tools</Application-Title>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
            <!-- Eclipse m2e lifecycle mapping to prevent IDE warnings for exec plugin executions -->
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.m2e</groupId>
                        <artifactId>lifecycle-mapping</artifactId>
                        <version>1.0.0</version>
                        <configuration>
                            <lifecycleMappingMetadata>
                                <pluginExecutions>
                                    <pluginExecution>
                                        <pluginExecutionFilter>
                                            <groupId>org.codehaus.mojo</groupId>
                                            <artifactId>exec-maven-plugin</artifactId>
                                            <versionRange>[3.1.0,)</versionRange>
                                            <goals>
                                                <goal>exec</goal>
                                            </goals>
                                        </pluginExecutionFilter>
                                        <action>
                                            <ignore/>
                                        </action>
                                    </pluginExecution>
                                </pluginExecutions>
                            </lifecycleMappingMetadata>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>

    <profiles>
        <!-- Platform detection profiles for JavaFX dependencies -->
        <profile>
            <id>javafx-mac-intel</id>
            <activation>
                <os><family>mac</family><arch>x86_64</arch></os>
            </activation>
            <properties>
                <javafx.platform>mac</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>javafx-mac-arm</id>
            <activation>
                <os><family>mac</family><arch>aarch64</arch></os>
            </activation>
            <properties>
                <javafx.platform>mac-aarch64</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>javafx-linux</id>
            <activation>
                <os><family>unix</family><name>linux</name></os>
            </activation>
            <properties>
                <javafx.platform>linux</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>javafx-windows</id>
            <activation>
                <os><family>windows</family></os>
            </activation>
            <properties>
                <javafx.platform>win</javafx.platform>
            </properties>
        </profile>

        <profile>
            <id>macos-app-image</id>
            <activation>
                <os><family>mac</family></os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>cleanup-old-app-image</id>
                                <phase>prepare-package</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>rm -rf "${project.build.directory}/dist/macos/${fddtools.app.name}.app" "${project.build.directory}/dist/macos/app-image/${fddtools.app.name}.app" "${project.build.directory}/dist/macos"/*.dmg "${project.build.directory}/jpackage-input"</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>prepare-jpackage-input</id>
                                <phase>package</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
set -e
IN_DIR="${project.build.directory}/jpackage-input"
mkdir -p "$IN_DIR"
cp -f "${project.build.directory}/${project.build.finalName}.jar" "$IN_DIR/"
# Be resilient if directory is empty (shouldn't be) — don't fail the build just for listing
LISTING=$(ls -1 "$IN_DIR" 2>/dev/null || true)
echo "[stage] jpackage input prepared: ${LISTING:-'(empty)'}"
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>print-packaging-config</id>
                                <phase>prepare-package</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>echo "[packaging] appName=${fddtools.app.name} bundleId=${fddtools.bundle.id} version=${fddtools.app.version} skipDmg=${skipDmg}"</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>build-javafx-runtime</id>
                                <phase>prepare-package</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
set -e
OUT_DIR="${project.build.directory}/javafx-runtime"
rm -rf "$OUT_DIR"
ARCH=$(uname -m); CLASSIFIER="mac"; if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then CLASSIFIER="mac-aarch64"; fi
VER="${javafx.version}"
REPO="$HOME/.m2/repository"
MP="$JAVA_HOME/jmods"
for MOD in base graphics controls fxml; do
    JAR="$REPO/org/openjfx/javafx-$MOD/$VER/javafx-$MOD-$VER-$CLASSIFIER.jar"
    if [ ! -f "$JAR" ]; then echo "Missing $JAR; run mvn -q -DskipTests package once to download deps"; exit 1; fi
    MP="$MP:$JAR"
done
echo "[jlink] Building JavaFX runtime with module-path: $MP"
jlink \
    --module-path "$MP" \
    --add-modules javafx.base,javafx.graphics,javafx.controls,javafx.fxml,java.prefs,java.logging,java.xml,java.desktop,java.naming,jdk.unsupported \
    --strip-debug --no-header-files --no-man-pages --compress=2 \
    --output "$OUT_DIR"
echo "[jlink] Runtime created at $OUT_DIR"
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>debug-jpackage-context</id>
                                <phase>verify</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-lc</argument>
                                        <argument><![CDATA[
set -e
echo "[debug] java -version"; java -version || true
echo "[debug] which jpackage"; which jpackage || true
echo "[debug] jpackage --version"; jpackage --version || true
echo "[debug] INPUT dir listing:"; ls -la "${project.build.directory}/jpackage-input" || true
echo "[debug] RUNTIME dir listing:"; ls -la "${project.build.directory}/javafx-runtime" || true
echo "[debug] DEST base:"; ls -la "${project.build.directory}/dist/macos/app-image" || mkdir -p "${project.build.directory}/dist/macos/app-image"
echo "[debug] main-jar=${project.build.finalName}.jar main-class=net.sourceforge.fddtools.FDDApplicationFX"
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>jpackage-app-image</id>
                                <phase>verify</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-lc</argument>
                                        <argument><![CDATA[
set -e
# Derive a numeric-only version for jpackage (strip any suffix like -beta)
FULL_VER="${fddtools.app.version}"
NUM_VER="${FULL_VER%%[^0-9.]*}"
if [ -z "$NUM_VER" ]; then NUM_VER="1.0.0"; fi
echo "[jpackage] Using numeric app version: $NUM_VER (from $FULL_VER)"
jpackage \
  --type app-image \
  --input "${project.build.directory}/jpackage-input" \
  --main-jar "${project.build.finalName}.jar" \
  --main-class net.sourceforge.fddtools.FDDApplicationFX \
  --name "${fddtools.app.name}" \
  --icon "${project.basedir}/src/main/resources/FDDTools.icns" \
  --app-version "$NUM_VER" \
  --vendor "FDD Tools Project" \
  --dest "${project.build.directory}/dist/macos/app-image" \
  --runtime-image "${project.build.directory}/javafx-runtime" \
  --mac-package-identifier "${fddtools.bundle.id}" \
  --mac-package-name "${fddtools.app.name}" \
  --java-options --enable-native-access=javafx.graphics \
  --java-options --add-reads=javafx.graphics=ALL-UNNAMED
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>normalize-launcher-name</id>
                                <phase>verify</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
APP_NAME="${fddtools.app.name}"; APP_DIR="${project.build.directory}/dist/macos/app-image/${fddtools.app.name}.app";
if [ -d "$APP_DIR" ]; then 
    NOSPACE=$(echo "$APP_NAME" | tr -d ' ');
    if [ "$NOSPACE" != "$APP_NAME" ]; then 
        SRC_L="$APP_DIR/Contents/MacOS/$APP_NAME"; DST_L="$APP_DIR/Contents/MacOS/$NOSPACE";
        if [ -f "$SRC_L" ]; then mv "$SRC_L" "$DST_L" && chmod +x "$DST_L"; fi;
        /usr/libexec/PlistBuddy -c "Set :CFBundleExecutable $NOSPACE" "$APP_DIR/Contents/Info.plist" || true;
        SRC_C="$APP_DIR/Contents/app/$APP_NAME.cfg"; DST_C="$APP_DIR/Contents/app/$NOSPACE.cfg";
        if [ -f "$SRC_C" ]; then mv "$SRC_C" "$DST_C"; fi;
        echo "[normalize] CFBundleExecutable set to $NOSPACE";
    fi;
fi;
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>jpackage-dmg</id>
                                <phase>verify</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <skip>${skipDmg}</skip>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-lc</argument>
                                        <argument><![CDATA[
set -e
FULL_VER="${fddtools.app.version}"
NUM_VER="${FULL_VER%%[^0-9.]*}"
if [ -z "$NUM_VER" ]; then NUM_VER="1.0.0"; fi
echo "[jpackage] Using numeric app version (DMG): $NUM_VER (from $FULL_VER)"
jpackage \
  --type dmg \
  --input "${project.build.directory}/jpackage-input" \
  --main-jar "${project.build.finalName}.jar" \
  --main-class net.sourceforge.fddtools.FDDApplicationFX \
  --name "${fddtools.app.name}" \
  --icon "${project.basedir}/src/main/resources/FDDTools.icns" \
  --app-version "$NUM_VER" \
  --vendor "FDD Tools Project" \
  --dest "${project.build.directory}/dist/macos" \
  --runtime-image "${project.build.directory}/javafx-runtime" \
  --mac-package-identifier "${fddtools.bundle.id}" \
  --mac-package-name "${fddtools.app.name}" \
  --java-options --enable-native-access=javafx.graphics \
  --java-options --add-reads=javafx.graphics=ALL-UNNAMED
]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>macos-icon-gen</id>
            <activation>
                <os><family>mac</family></os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>generate-icns</id>
                                <phase>generate-resources</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[set -e; ICONSET=target/icon-build/FDDTools.iconset; rm -rf "$ICONSET"; mkdir -p "$ICONSET"; \
cp src/main/resources/FDDTools-16.png "$ICONSET"/icon_16x16.png; \
cp src/main/resources/FDDTools-32.png "$ICONSET"/icon_16x16@2x.png; \
cp src/main/resources/FDDTools-32.png "$ICONSET"/icon_32x32.png; \
cp src/main/resources/FDDTools-64.png "$ICONSET"/icon_32x32@2x.png; \
cp src/main/resources/FDDTools-64.png "$ICONSET"/icon_64x64.png; \
cp src/main/resources/FDDTools-128.png "$ICONSET"/icon_64x64@2x.png || true; \
cp src/main/resources/FDDTools-128.png "$ICONSET"/icon_128x128.png; \
cp src/main/resources/FDDTools.png "$ICONSET"/icon_256x256.png || true; \
sips -z 256 256 src/main/resources/FDDTools-128.png --out "$ICONSET"/icon_128x128@2x.png >/dev/null 2>&1 || true; \
iconutil -c icns "$ICONSET" -o src/main/resources/FDDTools.icns; \
echo "[icon-gen] Regenerated FDDTools.icns"]]></argument>
                                    </arguments>
                                    <skip>${skipIconGen}</skip>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>macos-sign</id>
            <activation>
                <os><family>mac</family></os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>codesign-app</id>
                                <phase>verify</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <skip>${skipSign}</skip>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>if [ -n "$CODE_SIGN_IDENTITY" ]; then echo "[codesign] Signing app with $CODE_SIGN_IDENTITY"; codesign --force --deep --sign "$CODE_SIGN_IDENTITY" --timestamp "${project.build.directory}/dist/macos/app-image/${fddtools.app.name}.app" || exit 1; else echo "[codesign] CODE_SIGN_IDENTITY not set; skipping"; fi</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>