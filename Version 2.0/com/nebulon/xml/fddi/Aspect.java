//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.05.11 at 08:52:34 PM CST 
//
package com.nebulon.xml.fddi;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import net.sourceforge.fddtools.model.FDDINode;

/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="info" type="{http://www.nebulon.com/xml/2004/fddi}aspectInfo" minOccurs="0"/>
 *         &lt;element name="subject" type="{http://www.nebulon.com/xml/2004/fddi}subject" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.nebulon.com/xml/2004/fddi}progress" minOccurs="0"/>
 *         &lt;any/>
 *       &lt;/sequence>
 *       &lt;attGroup ref="{http://www.nebulon.com/xml/2004/fddi}baseAttrs"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder =
{
    "name",
    "info",
    "subject",
    "progress",
    "any"
})
@XmlRootElement(name = "aspect")
public class Aspect extends FDDINode
{

    protected AspectInfo info;
    protected List<Subject> subject;

    /**
     * Gets the value of the info property.
     * 
     * @return
     *     possible object is
     *     {@link AspectInfo }
     *     
     */
    public AspectInfo getInfo()
    {
        return info;
    }

    /**
     * Sets the value of the info property.
     * 
     * @param value
     *     allowed object is
     *     {@link AspectInfo }
     *     
     */
    public void setInfo(AspectInfo value)
    {
        this.info = value;
    }

    /**
     * Gets the value of the subject property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subject property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubject().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Subject }
     * 
     * 
     */
    public List<Subject> getSubject()
    {
        if(subject == null)
        {
            subject = new ArrayList<Subject>();
        }
        return this.subject;
    }

    public void add(List children)
    {
        for(Object child : children)
        {
            ((Subject) child).setParent(this);
        }
        getSubject().add((Subject) children);
    }

    public void add(FDDINode child)
    {
        ((Subject) child).setParent(this);
        getSubject().add((Subject) child);
    }

    public void insert(MutableTreeNode node, int index)
    {
        ((Subject) node).setParent(this);
        subject.add(index, (Subject) node);
    }

    public void remove(int index)
    {
        if(subject != null && subject.size() > index)
        subject.remove(index);
    }

    public void remove(MutableTreeNode node)
    {
        subject.remove((Subject) node);
    }

    public void setUserObject(Object arg0)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public TreeNode getChildAt(int index)
    {
        if(subject != null && subject.size() > index)
            return subject.get(index);
        else
            return null;
    }

    public int getChildCount()
    {
        if(subject != null && subject.size() > 0)
            return subject.size();
        else
            return 0;
    }

    public int getIndex(TreeNode node)
    {
        if(subject != null && subject.size() > 0)
            return subject.indexOf((Subject) node);
        else
            return -1;
    }

    public boolean getAllowsChildren()
    {
        return true;
    }

    public boolean isLeaf()
    {
        return (subject != null && (subject.size() <= 0));
    }

    public Enumeration children()
    {
        return Collections.enumeration(subject);
    }
}
